############################################################
#  	Default Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.
# For example java -Djava.util.logging.config.file=myfile
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
# handlers= java.util.logging.ConsoleHandler

# To also add the FileHandler, use the following line instead.
#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
.level= ALL

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# default file output is in user's home directory.
#java.util.logging.FileHandler.pattern = %h/java%u.log
#java.util.logging.FileHandler.limit = 50000
#java.util.logging.FileHandler.count = 1
#java.util.logging.FileHandler.formatter = com.acs.ts.vector.logging.VectorFormatter

# Limit the message that are printed on the console to INFO and above.
#java.util.logging.ConsoleHandler.level = ALL
#java.util.logging.ConsoleHandler.formatter = com.acs.ts.vector.logging.VectorFormatter

#java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter


############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

# For example, set the com.xyz.foo logger to only log SEVERE
# messages:

com.acs.ts.vector.level = ALL

handlers = com.conduent.ibts.alpr.process.vectorlogger.VectorConsoleHandler, com.conduent.ibts.alpr.process.vectorlogger.VectorFileHandler
#com.acs.ts.vector.handlers = com.acs.ts.vector.logging.VectorConsoleHandler, com.acs.ts.vector.logging.VectorFileHandler

com.acs.ts.vector.logging.VectorConsoleHandler.formatter = com.conduent.ibts.alpr.process.vectorlogger.VectorFormatter
com.acs.ts.vector.logging.VectorConsoleHandler.level = ALL
com.acs.ts.vector.logging.VectorFileHandler.formatter = com.conduent.ibts.alpr.process.vectorlogger.VectorFormatter
com.acs.ts.vector.logging.VectorFileHandler.pattern = ./logs/trcs_%u.log
com.acs.ts.vector.logging.VectorFileHandler.limit = 50000
com.acs.ts.vector.logging.VectorFileHandler.count = 2
com.acs.ts.vector.logging.VectorFileHandler.append = true

DUMP_STACK_TRACE = true
STACK_TRACE_DEPTH = 15


#The levels in descending order are:

#SEVERE (highest value)
#WARNING
#INFO
#CONFIG
#FINE
#FINER
#FINEST (lowest value)
#ALL indicates that all messages should be logged

#VECTOR_EXT_LOGGER = SEVERE
VECTOR_EXT_LOGGER = ALL